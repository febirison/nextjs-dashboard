{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/WDD430/nextjs-dashboard/.next-internal/server/app/dashboard/customers/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '00c7c1f325d2abda92629bc90b74d788cd3fe7668b'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///D:/WDD430/nextjs-dashboard/app/ui/search.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/search.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/search.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///D:/WDD430/nextjs-dashboard/app/ui/search.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/search.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/search.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiQ,GAC9R,+BACA","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///D:/WDD430/nextjs-dashboard/app/ui/customers/table.tsx"],"sourcesContent":["import Image from 'next/image';\nimport { lusitana } from '@/app/ui/fonts';\nimport Search from '@/app/ui/search';\nimport {\n  CustomersTableType,\n  FormattedCustomersTable,\n} from '@/app/lib/definitions';\n\nexport default async function CustomersTable({\n  customers,\n}: {\n  customers: FormattedCustomersTable[];\n}) {\n  return (\n    <div className=\"w-full\">\n      <h1 className={`${lusitana.className} mb-8 text-xl md:text-2xl`}>\n        Customers\n      </h1>\n      <Search placeholder=\"Search customers...\" />\n      <div className=\"mt-6 flow-root\">\n        <div className=\"overflow-x-auto\">\n          <div className=\"inline-block min-w-full align-middle\">\n            <div className=\"overflow-hidden rounded-md bg-gray-50 p-2 md:pt-0\">\n              <div className=\"md:hidden\">\n                {customers?.map((customer) => (\n                  <div\n                    key={customer.id}\n                    className=\"mb-2 w-full rounded-md bg-white p-4\"\n                  >\n                    <div className=\"flex items-center justify-between border-b pb-4\">\n                      <div>\n                        <div className=\"mb-2 flex items-center\">\n                          <div className=\"flex items-center gap-3\">\n                            <Image\n                              src={customer.image_url}\n                              className=\"rounded-full\"\n                              alt={`${customer.name}'s profile picture`}\n                              width={28}\n                              height={28}\n                            />\n                            <p>{customer.name}</p>\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-gray-500\">\n                          {customer.email}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex w-full items-center justify-between border-b py-5\">\n                      <div className=\"flex w-1/2 flex-col\">\n                        <p className=\"text-xs\">Pending</p>\n                        <p className=\"font-medium\">{customer.total_pending}</p>\n                      </div>\n                      <div className=\"flex w-1/2 flex-col\">\n                        <p className=\"text-xs\">Paid</p>\n                        <p className=\"font-medium\">{customer.total_paid}</p>\n                      </div>\n                    </div>\n                    <div className=\"pt-4 text-sm\">\n                      <p>{customer.total_invoices} invoices</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <table className=\"hidden min-w-full rounded-md text-gray-900 md:table\">\n                <thead className=\"rounded-md bg-gray-50 text-left text-sm font-normal\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-4 py-5 font-medium sm:pl-6\">\n                      Name\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-5 font-medium\">\n                      Email\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-5 font-medium\">\n                      Total Invoices\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-5 font-medium\">\n                      Total Pending\n                    </th>\n                    <th scope=\"col\" className=\"px-4 py-5 font-medium\">\n                      Total Paid\n                    </th>\n                  </tr>\n                </thead>\n\n                <tbody className=\"divide-y divide-gray-200 text-gray-900\">\n                  {customers.map((customer) => (\n                    <tr key={customer.id} className=\"group\">\n                      <td className=\"whitespace-nowrap bg-white py-5 pl-4 pr-3 text-sm text-black group-first-of-type:rounded-md group-last-of-type:rounded-md sm:pl-6\">\n                        <div className=\"flex items-center gap-3\">\n                          <Image\n                            src={customer.image_url}\n                            className=\"rounded-full\"\n                            alt={`${customer.name}'s profile picture`}\n                            width={28}\n                            height={28}\n                          />\n                          <p>{customer.name}</p>\n                        </div>\n                      </td>\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm\">\n                        {customer.email}\n                      </td>\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm\">\n                        {customer.total_invoices}\n                      </td>\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm\">\n                        {customer.total_pending}\n                      </td>\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm group-first-of-type:rounded-md group-last-of-type:rounded-md\">\n                        {customer.total_paid}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;;;;;AAMe,eAAe,eAAe,EAC3C,SAAS,EAGV;IACC,qBACE,6WAAC;QAAI,WAAU;;0BACb,6WAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BAGjE,6WAAC,oHAAA,CAAA,UAAM;gBAAC,aAAY;;;;;;0BACpB,6WAAC;gBAAI,WAAU;0BACb,cAAA,6WAAC;oBAAI,WAAU;8BACb,cAAA,6WAAC;wBAAI,WAAU;kCACb,cAAA,6WAAC;4BAAI,WAAU;;8CACb,6WAAC;oCAAI,WAAU;8CACZ,WAAW,IAAI,CAAC,yBACf,6WAAC;4CAEC,WAAU;;8DAEV,6WAAC;oDAAI,WAAU;8DACb,cAAA,6WAAC;;0EACC,6WAAC;gEAAI,WAAU;0EACb,cAAA,6WAAC;oEAAI,WAAU;;sFACb,6WAAC,4PAAA,CAAA,UAAK;4EACJ,KAAK,SAAS,SAAS;4EACvB,WAAU;4EACV,KAAK,GAAG,SAAS,IAAI,CAAC,kBAAkB,CAAC;4EACzC,OAAO;4EACP,QAAQ;;;;;;sFAEV,6WAAC;sFAAG,SAAS,IAAI;;;;;;;;;;;;;;;;;0EAGrB,6WAAC;gEAAE,WAAU;0EACV,SAAS,KAAK;;;;;;;;;;;;;;;;;8DAIrB,6WAAC;oDAAI,WAAU;;sEACb,6WAAC;4DAAI,WAAU;;8EACb,6WAAC;oEAAE,WAAU;8EAAU;;;;;;8EACvB,6WAAC;oEAAE,WAAU;8EAAe,SAAS,aAAa;;;;;;;;;;;;sEAEpD,6WAAC;4DAAI,WAAU;;8EACb,6WAAC;oEAAE,WAAU;8EAAU;;;;;;8EACvB,6WAAC;oEAAE,WAAU;8EAAe,SAAS,UAAU;;;;;;;;;;;;;;;;;;8DAGnD,6WAAC;oDAAI,WAAU;8DACb,cAAA,6WAAC;;4DAAG,SAAS,cAAc;4DAAC;;;;;;;;;;;;;2CAjCzB,SAAS,EAAE;;;;;;;;;;8CAsCtB,6WAAC;oCAAM,WAAU;;sDACf,6WAAC;4CAAM,WAAU;sDACf,cAAA,6WAAC;;kEACC,6WAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAgC;;;;;;kEAG1D,6WAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;kEAGlD,6WAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;kEAGlD,6WAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;kEAGlD,6WAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;;;;;;;;;;;;sDAMtD,6WAAC;4CAAM,WAAU;sDACd,UAAU,GAAG,CAAC,CAAC,yBACd,6WAAC;oDAAqB,WAAU;;sEAC9B,6WAAC;4DAAG,WAAU;sEACZ,cAAA,6WAAC;gEAAI,WAAU;;kFACb,6WAAC,4PAAA,CAAA,UAAK;wEACJ,KAAK,SAAS,SAAS;wEACvB,WAAU;wEACV,KAAK,GAAG,SAAS,IAAI,CAAC,kBAAkB,CAAC;wEACzC,OAAO;wEACP,QAAQ;;;;;;kFAEV,6WAAC;kFAAG,SAAS,IAAI;;;;;;;;;;;;;;;;;sEAGrB,6WAAC;4DAAG,WAAU;sEACX,SAAS,KAAK;;;;;;sEAEjB,6WAAC;4DAAG,WAAU;sEACX,SAAS,cAAc;;;;;;sEAE1B,6WAAC;4DAAG,WAAU;sEACX,SAAS,aAAa;;;;;;sEAEzB,6WAAC;4DAAG,WAAU;sEACX,SAAS,UAAU;;;;;;;mDAvBf,SAAS,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCxC","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file:///D:/WDD430/nextjs-dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number of pages is 7 or less,\n  // display all pages without any ellipsis.\n  if (totalPages <= 7) {\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\n  }\n\n  // If the current page is among the first 3 pages,\n  // show the first 3, an ellipsis, and the last 2 pages.\n  if (currentPage <= 3) {\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\n  }\n\n  // If the current page is among the last 3 pages,\n  // show the first 2, an ellipsis, and the last 3 pages.\n  if (currentPage >= totalPages - 2) {\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\n  }\n\n  // If the current page is somewhere in the middle,\n  // show the first page, an ellipsis, the current page and its neighbors,\n  // another ellipsis, and the last page.\n  return [\n    1,\n    '...',\n    currentPage - 1,\n    currentPage,\n    currentPage + 1,\n    '...',\n    totalPages,\n  ];\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 558, "column": 0}, "map": {"version":3,"sources":["file:///D:/WDD430/nextjs-dashboard/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nexport async function fetchRevenue() {\n  try {\n    // Artificially delay a response for demo purposes.\n    // Don't do this in production :)\n\n     console.log('Fetching revenue data...');\n     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n    const data = await sql<Revenue[]>`SELECT * FROM revenue`;\n\n     console.log('Data fetch completed after 3 seconds.');\n\n    return data;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch revenue data.');\n  }\n}\n\nexport async function fetchLatestInvoices() {\n  try {\n    const data = await sql<LatestInvoiceRaw[]>`\n      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      ORDER BY invoices.date DESC\n      LIMIT 5`;\n\n    const latestInvoices = data.map((invoice) => ({\n      ...invoice,\n      amount: formatCurrency(invoice.amount),\n    }));\n    return latestInvoices;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch the latest invoices.');\n  }\n}\n\nexport async function fetchCardData() {\n  try {\n    // You can probably combine these into a single SQL query\n    // However, we are intentionally splitting them to demonstrate\n    // how to initialize multiple queries in parallel with JS.\n    const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n    const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n    const invoiceStatusPromise = sql`SELECT\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n         FROM invoices`;\n\n    const data = await Promise.all([\n      invoiceCountPromise,\n      customerCountPromise,\n      invoiceStatusPromise,\n    ]);\n\n    const numberOfInvoices = Number(data[0][0].count ?? '0');\n    const numberOfCustomers = Number(data[1][0].count ?? '0');\n    const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n    const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n    return {\n      numberOfCustomers,\n      numberOfInvoices,\n      totalPaidInvoices,\n      totalPendingInvoices,\n    };\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch card data.');\n  }\n}\n\nconst ITEMS_PER_PAGE = 6;\nexport async function fetchFilteredInvoices(\n  query: string,\n  currentPage: number,\n) {\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n  try {\n    const invoices = await sql<InvoicesTable[]>`\n      SELECT\n        invoices.id,\n        invoices.amount,\n        invoices.date,\n        invoices.status,\n        customers.name,\n        customers.email,\n        customers.image_url\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      WHERE\n        customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`} OR\n        invoices.amount::text ILIKE ${`%${query}%`} OR\n        invoices.date::text ILIKE ${`%${query}%`} OR\n        invoices.status ILIKE ${`%${query}%`}\n      ORDER BY invoices.date DESC\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n    `;\n\n    return invoices;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoices.');\n  }\n}\n\nexport async function fetchInvoicesPages(query: string) {\n  try {\n    const data = await sql`SELECT COUNT(*)\n    FROM invoices\n    JOIN customers ON invoices.customer_id = customers.id\n    WHERE\n      customers.name ILIKE ${`%${query}%`} OR\n      customers.email ILIKE ${`%${query}%`} OR\n      invoices.amount::text ILIKE ${`%${query}%`} OR\n      invoices.date::text ILIKE ${`%${query}%`} OR\n      invoices.status ILIKE ${`%${query}%`}\n  `;\n\n    const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\n    return totalPages;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch total number of invoices.');\n  }\n}\n\nexport async function fetchInvoiceById(id: string) {\n  try {\n    const data = await sql<InvoiceForm[]>`\n      SELECT\n        invoices.id,\n        invoices.customer_id,\n        invoices.amount,\n        invoices.status\n      FROM invoices\n      WHERE invoices.id = ${id};\n    `;\n\n    const invoice = data.map((invoice) => ({\n      ...invoice,\n      // Convert amount from cents to dollars\n      amount: invoice.amount / 100,\n    }));\n\n    return invoice[0];\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoice.');\n  }\n}\n\nexport async function fetchCustomers() {\n  try {\n    const customers = await sql<CustomerField[]>`\n      SELECT\n        id,\n        name\n      FROM customers\n      ORDER BY name ASC\n    `;\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch all customers.');\n  }\n}\n\nexport async function fetchFilteredCustomers(query: string) {\n  try {\n    const data = await sql<CustomersTableType[]>`\n\t\tSELECT\n\t\t  customers.id,\n\t\t  customers.name,\n\t\t  customers.email,\n\t\t  customers.image_url,\n\t\t  COUNT(invoices.id) AS total_invoices,\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n\t\tFROM customers\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n\t\tWHERE\n\t\t  customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`}\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n\t\tORDER BY customers.name ASC\n\t  `;\n\n    const customers = data.map((customer) => ({\n      ...customer,\n      total_pending: formatCurrency(customer.total_pending),\n      total_paid: formatCurrency(customer.total_paid),\n    }));\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch customer table.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 760, "column": 0}, "map": {"version":3,"sources":["file:///D:/WDD430/nextjs-dashboard/app/dashboard/customers/page.tsx"],"sourcesContent":["import CustomersTable from '@/app/ui/customers/table';\r\nimport { fetchFilteredCustomers } from '@/app/lib/data';\r\nimport { Metadata } from 'next';\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Customers',\r\n};\r\n\r\nexport default async function Page({\r\n  searchParams,\r\n}: {\r\n  searchParams?: {\r\n    query?: string;\r\n    page?: string;\r\n  };\r\n}) {\r\n  const query = searchParams?.query || '';\r\n  const customers = await fetchFilteredCustomers(query);\r\n  return (\r\n    <main>\r\n      <CustomersTable customers={customers} />\r\n    </main>\r\n  );\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAGO,MAAM,WAAqB;IAChC,OAAO;AACT;AAEe,eAAe,KAAK,EACjC,YAAY,EAMb;IACC,MAAM,QAAQ,cAAc,SAAS;IACrC,MAAM,YAAY,MAAM,CAAA,GAAA,kHAAA,CAAA,yBAAsB,AAAD,EAAE;IAC/C,qBACE,6WAAC;kBACC,cAAA,6WAAC,gIAAA,CAAA,UAAc;YAAC,WAAW;;;;;;;;;;;AAGjC","debugId":null}}]
}